// <auto-generated />
using System;
using HealthCare.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthCare.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.AllReservations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("FromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RoomAppointmentDateId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("RoomReservationId")
                        .HasColumnType("int");

                    b.Property<string>("ToTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("AllReservations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.ClinicAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClinicLabId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicLabId");

                    b.HasIndex("DoctorId");

                    b.ToTable("ClinicAppointments");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.ClinicAppointmentDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClinicAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<string>("FromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicAppointmentId");

                    b.HasIndex("DayId");

                    b.ToTable("ClinicAppointmentDates");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.ClinicReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClinicAppointmentDateId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicAppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicAppointmentDateId");

                    b.HasIndex("ClinicAppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("ClinicReservations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Days");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            DayName = "Saturday"
                        },
                        new
                        {
                            Id = 11,
                            DayName = "Sunday"
                        },
                        new
                        {
                            Id = 12,
                            DayName = "Monday"
                        },
                        new
                        {
                            Id = 13,
                            DayName = "Tuesday"
                        },
                        new
                        {
                            Id = 14,
                            DayName = "Wednesday"
                        },
                        new
                        {
                            Id = 15,
                            DayName = "Thursday"
                        },
                        new
                        {
                            Id = 16,
                            DayName = "Friday"
                        });
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.LabAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LabId");

                    b.ToTable("LabAppointments");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.LabAppointmentDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<string>("FromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LabAppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("ToTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("LabAppointmentId");

                    b.ToTable("LabAppointmentDates");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.LabReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LabAppointmentDateId")
                        .HasColumnType("int");

                    b.Property<int>("LabAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabAppointmentDateId");

                    b.HasIndex("LabAppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("LabReservations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.XrayAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XrayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("XrayId");

                    b.ToTable("XrayAppointments");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.XrayAppointmentDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<string>("FromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XrayAppointmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("XrayAppointmentId");

                    b.ToTable("XrayAppointmentDates");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.XrayReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("XrayAppointmentDateId")
                        .HasColumnType("int");

                    b.Property<int>("XrayAppointmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("XrayAppointmentDateId");

                    b.HasIndex("XrayAppointmentId");

                    b.ToTable("XrayReservations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.CivilRegestration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CivilRegestrations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoredFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("HealthCare.Core.Models.BandModule.Band", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentStateId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomNum")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStateId")
                        .IsUnique();

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("HealthCare.Core.Models.BandModule.CurrentState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BloodPressure")
                        .HasColumnType("int");

                    b.Property<int?>("BodyTemperature")
                        .HasColumnType("int");

                    b.Property<int?>("HeartRate")
                        .HasColumnType("int");

                    b.Property<int?>("OxygenLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CurrentStates");
                });

            modelBuilder.Entity("HealthCare.Core.Models.BandModule.SavedBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("DoctorId");

                    b.ToTable("SavedBands");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.ClinicLab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ClinicLabs");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.ClinicLabDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClinicLabId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicLabId");

                    b.HasIndex("DoctorId");

                    b.ToTable("ClinicLabDoctors");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.Lab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.LabDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LabId");

                    b.ToTable("LabDoctors");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.LabSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.ToTable("LabSpecializations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.SpecializationsOfLab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<int>("LabSpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.HasIndex("LabSpecializationId");

                    b.ToTable("SpecializationsOfLabs");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.Xray", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("XraySpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("XraySpecializationId");

                    b.ToTable("Xrays");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.XrayDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("XrayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("XrayId");

                    b.ToTable("XrayDoctors");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.XraySpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.ToTable("XraySpecializations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.DoctorModule.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthCare.Core.Models.DoctorModule.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("DoctorSpecializations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.DoctorModule.HospitalDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.ToTable("HospitalDoctors");
                });

            modelBuilder.Entity("HealthCare.Core.Models.DoctorModule.RateDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("RateDoctors");
                });

            modelBuilder.Entity("HealthCare.Core.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.AdminOfHospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HospitalAdminId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalAdminId")
                        .IsUnique();

                    b.HasIndex("HospitalId");

                    b.ToTable("AdminOfHospitals");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.HospitalAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.ToTable("HospitalAdmins");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.HospitalGovernorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("HospitalId")
                        .IsUnique();

                    b.ToTable("HospitalGovernorates");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.PatientModule.MedicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllergyDescribtion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AnyAllergy")
                        .HasColumnType("bit");

                    b.Property<bool>("AnyDiseases")
                        .HasColumnType("bit");

                    b.Property<bool>("AnyMedicine")
                        .HasColumnType("bit");

                    b.Property<bool>("AnySurgery")
                        .HasColumnType("bit");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiseasesDescribtion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Endorsement")
                        .HasColumnType("bit");

                    b.Property<string>("FriendAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendPhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("MedicalInsurance")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalInsuranceDescribtion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineDescribtion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgeryDescribtion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("HealthCare.Core.Models.PatientModule.MedicalHistoryFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("MedicalHistoryFiles");
                });

            modelBuilder.Entity("HealthCare.Core.Models.PatientModule.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int?>("UploadedFileId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryId")
                        .IsUnique()
                        .HasFilter("[MedicalHistoryId] IS NOT NULL");

                    b.HasIndex("UploadedFileId")
                        .IsUnique()
                        .HasFilter("[UploadedFileId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.AllReservations", b =>
                {
                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("AllReservations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.PatientModule.Patient", "Patient")
                        .WithMany("AllReservations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.ClinicAppointment", b =>
                {
                    b.HasOne("HealthCare.Core.Models.ClinicModule.ClinicLab", "ClinicLab")
                        .WithMany("ClinicAppointments")
                        .HasForeignKey("ClinicLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("ClinicAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicLab");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.ClinicAppointmentDate", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AppointmentModule.ClinicAppointment", "ClinicAppointment")
                        .WithMany("ClinicAppointmentDates")
                        .HasForeignKey("ClinicAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.AppointmentModule.Day", "Day")
                        .WithMany("ClinicAppointmentDates")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicAppointment");

                    b.Navigation("Day");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.ClinicReservation", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AppointmentModule.ClinicAppointmentDate", "ClinicAppointmentDate")
                        .WithMany("ClinicReservations")
                        .HasForeignKey("ClinicAppointmentDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.AppointmentModule.ClinicAppointment", "ClinicAppointment")
                        .WithMany("ClinicReservations")
                        .HasForeignKey("ClinicAppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.PatientModule.Patient", "Patient")
                        .WithMany("ClinicReservations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicAppointment");

                    b.Navigation("ClinicAppointmentDate");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.LabAppointment", b =>
                {
                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("LabAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.ClinicModule.Lab", "Lab")
                        .WithMany("LabAppointments")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.LabAppointmentDate", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AppointmentModule.Day", "Day")
                        .WithMany("LabAppointmentDates")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.AppointmentModule.LabAppointment", "LabAppointment")
                        .WithMany("LabAppointmentDates")
                        .HasForeignKey("LabAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("LabAppointment");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.LabReservation", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AppointmentModule.LabAppointmentDate", "LabAppointmentDate")
                        .WithMany("LabReservations")
                        .HasForeignKey("LabAppointmentDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.AppointmentModule.LabAppointment", "LabAppointment")
                        .WithMany("LabReservations")
                        .HasForeignKey("LabAppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.PatientModule.Patient", "Patient")
                        .WithMany("LabReservations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabAppointment");

                    b.Navigation("LabAppointmentDate");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.XrayAppointment", b =>
                {
                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("XrayAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.ClinicModule.Xray", "Xray")
                        .WithMany("XrayAppointments")
                        .HasForeignKey("XrayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Xray");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.XrayAppointmentDate", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AppointmentModule.Day", "Day")
                        .WithMany("XrayAppointmentDates")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.AppointmentModule.XrayAppointment", "XrayAppointment")
                        .WithMany("XrayAppointmentDates")
                        .HasForeignKey("XrayAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("XrayAppointment");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.XrayReservation", b =>
                {
                    b.HasOne("HealthCare.Core.Models.PatientModule.Patient", "Patient")
                        .WithMany("XrayReservations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.AppointmentModule.XrayAppointmentDate", "XrayAppointmentDate")
                        .WithMany("XrayReservations")
                        .HasForeignKey("XrayAppointmentDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.AppointmentModule.XrayAppointment", "XrayAppointment")
                        .WithMany("XrayReservations")
                        .HasForeignKey("XrayAppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("XrayAppointment");

                    b.Navigation("XrayAppointmentDate");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.RefreshToken", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AuthModule.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.User", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AuthModule.UploadedFile", "UploadedFile")
                        .WithOne("User")
                        .HasForeignKey("HealthCare.Core.Models.AuthModule.User", "UploadedFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.UserRole", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AuthModule.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.AuthModule.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("HealthCare.Core.Models.AuthModule.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthCare.Core.Models.BandModule.Band", b =>
                {
                    b.HasOne("HealthCare.Core.Models.BandModule.CurrentState", "CurrentState")
                        .WithOne("Band")
                        .HasForeignKey("HealthCare.Core.Models.BandModule.Band", "CurrentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.HospitalModule.Hospital", "Hospital")
                        .WithMany("Bands")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.PatientModule.Patient", "Patient")
                        .WithMany("Bands")
                        .HasForeignKey("PatientId");

                    b.Navigation("CurrentState");

                    b.Navigation("Hospital");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthCare.Core.Models.BandModule.SavedBand", b =>
                {
                    b.HasOne("HealthCare.Core.Models.BandModule.Band", "Band")
                        .WithMany("SavedBands")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("SavedBands")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.ClinicLab", b =>
                {
                    b.HasOne("HealthCare.Core.Models.HospitalModule.Hospital", "Hospital")
                        .WithMany("ClinicLabs")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.HospitalModule.Specialization", "Specialization")
                        .WithMany("ClinicLabs")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.ClinicLabDoctor", b =>
                {
                    b.HasOne("HealthCare.Core.Models.ClinicModule.ClinicLab", "ClinicLab")
                        .WithMany("clinicLabDoctors")
                        .HasForeignKey("ClinicLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("clinicLabDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicLab");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.Lab", b =>
                {
                    b.HasOne("HealthCare.Core.Models.HospitalModule.Hospital", "Hospital")
                        .WithMany("Labs")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.LabDoctor", b =>
                {
                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("LabDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.ClinicModule.Lab", "Lab")
                        .WithMany("LabDoctors")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.LabSpecialization", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AuthModule.UploadedFile", "UploadedFile")
                        .WithOne("LabSpecialization")
                        .HasForeignKey("HealthCare.Core.Models.ClinicModule.LabSpecialization", "UploadedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.SpecializationsOfLab", b =>
                {
                    b.HasOne("HealthCare.Core.Models.ClinicModule.Lab", "Lab")
                        .WithMany("SpecializationsOfLab")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.ClinicModule.LabSpecialization", "LabSpecialization")
                        .WithMany("SpecializationsOfLab")
                        .HasForeignKey("LabSpecializationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lab");

                    b.Navigation("LabSpecialization");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.Xray", b =>
                {
                    b.HasOne("HealthCare.Core.Models.HospitalModule.Hospital", "Hospital")
                        .WithMany("Xrays")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.ClinicModule.XraySpecialization", "XraySpecialization")
                        .WithMany("Xrays")
                        .HasForeignKey("XraySpecializationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("XraySpecialization");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.XrayDoctor", b =>
                {
                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("XrayDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.ClinicModule.Xray", "Xray")
                        .WithMany("XrayDoctors")
                        .HasForeignKey("XrayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Xray");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.XraySpecialization", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AuthModule.UploadedFile", "UploadedFile")
                        .WithOne("XraySpecialization")
                        .HasForeignKey("HealthCare.Core.Models.ClinicModule.XraySpecialization", "UploadedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("HealthCare.Core.Models.DoctorModule.Doctor", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AuthModule.UploadedFile", "UploadedFile")
                        .WithOne("Doctor")
                        .HasForeignKey("HealthCare.Core.Models.DoctorModule.Doctor", "UploadedFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("HealthCare.Core.Models.DoctorModule.DoctorSpecialization", b =>
                {
                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("DoctorSpecialization")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.HospitalModule.Specialization", "Specialization")
                        .WithMany("DoctorSpecialization")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HealthCare.Core.Models.DoctorModule.HospitalDoctor", b =>
                {
                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("hospitalDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.HospitalModule.Hospital", "Hospital")
                        .WithMany("hospitalDoctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthCare.Core.Models.DoctorModule.RateDoctor", b =>
                {
                    b.HasOne("HealthCare.Core.Models.DoctorModule.Doctor", "Doctor")
                        .WithMany("RateDoctor")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.PatientModule.Patient", "Patient")
                        .WithMany("RateDoctor")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.AdminOfHospital", b =>
                {
                    b.HasOne("HealthCare.Core.Models.HospitalModule.HospitalAdmin", "HospitalAdmin")
                        .WithOne("AdminOfHospital")
                        .HasForeignKey("HealthCare.Core.Models.HospitalModule.AdminOfHospital", "HospitalAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.HospitalModule.Hospital", "Hospital")
                        .WithMany("AdminOfHospitals")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("HospitalAdmin");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.Hospital", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AuthModule.UploadedFile", "UploadedFile")
                        .WithOne("Hospital")
                        .HasForeignKey("HealthCare.Core.Models.HospitalModule.Hospital", "UploadedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.HospitalAdmin", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AuthModule.UploadedFile", "UploadedFile")
                        .WithOne("HospitalAdmin")
                        .HasForeignKey("HealthCare.Core.Models.HospitalModule.HospitalAdmin", "UploadedFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.HospitalGovernorate", b =>
                {
                    b.HasOne("HealthCare.Core.Models.Governorate", "Governorate")
                        .WithMany("HospitalGovernorates")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCare.Core.Models.HospitalModule.Hospital", "Hospital")
                        .WithOne("HospitalGovernorate")
                        .HasForeignKey("HealthCare.Core.Models.HospitalModule.HospitalGovernorate", "HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.Specialization", b =>
                {
                    b.HasOne("HealthCare.Core.Models.AuthModule.UploadedFile", "UploadedFile")
                        .WithOne("Specialization")
                        .HasForeignKey("HealthCare.Core.Models.HospitalModule.Specialization", "UploadedFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("HealthCare.Core.Models.PatientModule.MedicalHistoryFile", b =>
                {
                    b.HasOne("HealthCare.Core.Models.PatientModule.MedicalHistory", "MedicalHistory")
                        .WithMany("MedicalHistoryFiles")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalHistory");
                });

            modelBuilder.Entity("HealthCare.Core.Models.PatientModule.Patient", b =>
                {
                    b.HasOne("HealthCare.Core.Models.PatientModule.MedicalHistory", "MedicalHistory")
                        .WithOne("Patient")
                        .HasForeignKey("HealthCare.Core.Models.PatientModule.Patient", "MedicalHistoryId");

                    b.HasOne("HealthCare.Core.Models.AuthModule.UploadedFile", "UploadedFile")
                        .WithOne("Patient")
                        .HasForeignKey("HealthCare.Core.Models.PatientModule.Patient", "UploadedFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MedicalHistory");

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.ClinicAppointment", b =>
                {
                    b.Navigation("ClinicAppointmentDates");

                    b.Navigation("ClinicReservations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.ClinicAppointmentDate", b =>
                {
                    b.Navigation("ClinicReservations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.Day", b =>
                {
                    b.Navigation("ClinicAppointmentDates");

                    b.Navigation("LabAppointmentDates");

                    b.Navigation("XrayAppointmentDates");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.LabAppointment", b =>
                {
                    b.Navigation("LabAppointmentDates");

                    b.Navigation("LabReservations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.LabAppointmentDate", b =>
                {
                    b.Navigation("LabReservations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.XrayAppointment", b =>
                {
                    b.Navigation("XrayAppointmentDates");

                    b.Navigation("XrayReservations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AppointmentModule.XrayAppointmentDate", b =>
                {
                    b.Navigation("XrayReservations");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.Role", b =>
                {
                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.UploadedFile", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Hospital")
                        .IsRequired();

                    b.Navigation("HospitalAdmin")
                        .IsRequired();

                    b.Navigation("LabSpecialization")
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Specialization")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();

                    b.Navigation("XraySpecialization")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare.Core.Models.AuthModule.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRole")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare.Core.Models.BandModule.Band", b =>
                {
                    b.Navigation("SavedBands");
                });

            modelBuilder.Entity("HealthCare.Core.Models.BandModule.CurrentState", b =>
                {
                    b.Navigation("Band")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.ClinicLab", b =>
                {
                    b.Navigation("ClinicAppointments");

                    b.Navigation("clinicLabDoctors");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.Lab", b =>
                {
                    b.Navigation("LabAppointments");

                    b.Navigation("LabDoctors");

                    b.Navigation("SpecializationsOfLab");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.LabSpecialization", b =>
                {
                    b.Navigation("SpecializationsOfLab");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.Xray", b =>
                {
                    b.Navigation("XrayAppointments");

                    b.Navigation("XrayDoctors");
                });

            modelBuilder.Entity("HealthCare.Core.Models.ClinicModule.XraySpecialization", b =>
                {
                    b.Navigation("Xrays");
                });

            modelBuilder.Entity("HealthCare.Core.Models.DoctorModule.Doctor", b =>
                {
                    b.Navigation("AllReservations");

                    b.Navigation("ClinicAppointments");

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("LabAppointments");

                    b.Navigation("LabDoctors");

                    b.Navigation("RateDoctor");

                    b.Navigation("SavedBands");

                    b.Navigation("XrayAppointments");

                    b.Navigation("XrayDoctors");

                    b.Navigation("clinicLabDoctors");

                    b.Navigation("hospitalDoctors");
                });

            modelBuilder.Entity("HealthCare.Core.Models.Governorate", b =>
                {
                    b.Navigation("HospitalGovernorates");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.Hospital", b =>
                {
                    b.Navigation("AdminOfHospitals");

                    b.Navigation("Bands");

                    b.Navigation("ClinicLabs");

                    b.Navigation("HospitalGovernorate")
                        .IsRequired();

                    b.Navigation("Labs");

                    b.Navigation("Xrays");

                    b.Navigation("hospitalDoctors");
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.HospitalAdmin", b =>
                {
                    b.Navigation("AdminOfHospital")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare.Core.Models.HospitalModule.Specialization", b =>
                {
                    b.Navigation("ClinicLabs");

                    b.Navigation("DoctorSpecialization");
                });

            modelBuilder.Entity("HealthCare.Core.Models.PatientModule.MedicalHistory", b =>
                {
                    b.Navigation("MedicalHistoryFiles");

                    b.Navigation("Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCare.Core.Models.PatientModule.Patient", b =>
                {
                    b.Navigation("AllReservations");

                    b.Navigation("Bands");

                    b.Navigation("ClinicReservations");

                    b.Navigation("LabReservations");

                    b.Navigation("RateDoctor");

                    b.Navigation("XrayReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
